// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/29/2022 17:00:00"
                                                                                
// Verilog Test Bench template for design : digital_tube
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module digital_tube_vlg_tst();
// constants                                           
// general purpose registers

// test vector input registers
reg clk;
reg clk_sel;
reg reset;
// wires                                               
wire [6:0]  q;
wire [3:0]  d_out;

// assign statements (if any)                          
digital_tube i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.q(q),
	.clk_sel(clk_sel),
	.d_out(d_out),
	.reset(reset)
);
initial                                                
begin                                                  
clk = 1'b0;
clk_sel = 1'b0;
reset = 1'b1;
forever begin
#10 clk = ~clk;  
end 
end 


initial begin
forever #160 clk_sel = clk_sel;
end
initial begin
forever #1600 reset = ~reset;
end

initial #10000 $finish;                                                   
                                             
endmodule

